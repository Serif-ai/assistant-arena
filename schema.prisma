// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(cuid())
  ip        String?  @unique
  createdAt DateTime @default(now())
  votes     Vote[]

  @@index([ip])
}

model EmailThread {
  id          String       @id @default(cuid())
  messages    Json[]
  groundTruth Json         @default("{}")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  responses   AIResponse[]
  votes       Vote[]
}

model AIResponse {
  id           String      @id @default(cuid())
  content      String
  threadId     String
  thread       EmailThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  model        String
  organization String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  eloRating    Int         @default(1500)
  votesWon     Vote[]      @relation("WinningResponse")
  votesLost    Vote[]      @relation("LosingResponse")

  @@index([threadId])
}

model Vote {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  threadId        String
  thread          EmailThread @relation(fields: [threadId], references: [id])
  winningResponse String
  winner          AIResponse  @relation("WinningResponse", fields: [winningResponse], references: [id])
  losingResponse  String
  loser           AIResponse  @relation("LosingResponse", fields: [losingResponse], references: [id])
  timeToVote      Int         // in seconds
  createdAt       DateTime    @default(now())

  @@index([userId])
  @@index([threadId])
  @@index([winningResponse])
  @@index([losingResponse])
}
